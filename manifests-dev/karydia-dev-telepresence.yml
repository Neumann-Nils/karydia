apiVersion: v1
kind: ServiceAccount
metadata:
  name: opa
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: opa
  namespace: kube-system
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: opa
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
data:
  parameters.rego: |
    package parameters
    clusterName = "foo"
    forbiddenPrefix = "nonono"
  default-policy-matches.rego: |
    package k8s
    import data.kubernetes.policies
    policymatches[[name, policy]] {
        policy := policies[name]
    }
  default-kubernetes-matches.rego: |
    package k8s
    import data.kubernetes
    matches[[kind, namespace, name, resource]] {
        resource := kubernetes[kind][namespace][name]
    }
  no-foreign-nodes.rego: |
    package admission
    import data.k8s.matches
    import data.kubernetes.nodes
    import data.parameters.clusterName
    deny[{
        "id": "no-foreign-nodes",
        "resource": {"kind": "nodes", "namespace": "", "name": name},
        "resolution": {"message" : sprintf("cannot use foreign node %q", [requestedNode])},
    }] {
        matches[["nodes", "", name, matched_object]]
        nodePrefix = sprintf("%s-", [clusterName])
        requestedNode := matched_object.metadata.name
        not startswith(matched_object.metadata.name, nodePrefix)
    }
  no-foreign-volumes.rego: |
    package admission
    import data.k8s.matches
    import data.kubernetes.persistentvolumes
    import data.parameters.clusterName
    deny[{
        "id": "no-foreign-volumes",
        "resource": {"kind": "persistentvolumes", "namespace": namespace, "name": name},
        "resolution": {"message" : sprintf("cannot use foreign volume %q", [requestedDisk])},
    }] {
        matches[["persistentvolumes", namespace, name, matched_object]]
        diskPrefix = sprintf("%s-", [clusterName])
        requestedDisk := matched_object.spec.gcePersistentDisk.pdName
        not startswith(matched_object.spec.gcePersistentDisk.pdName, diskPrefix)
    }
  test-pod.rego: |
    package admission
    import data.k8s.matches
    import data.kubernetes.pods
    import data.parameters.forbiddenPrefix
    deny[{
        "id": "test-pod",
        "resource": {"kind": "pods", "namespace": namespace, "name": name},
        "resolution": {"message" : sprintf("cannot use pod name %q", [requestedName])},
    }] {
        matches[["pods", namespace, name, matched_object]]
        namePrefix = sprintf("%s-", [forbiddenPrefix])
        requestedName := matched_object.metadata.name
        startswith(matched_object.metadata.name, namePrefix)
    }
kind: ConfigMap
metadata:
  name: opa-policies
  namespace: kube-system

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: karydia
  labels:
    app: karydia
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: karydia
    spec:
      serviceAccount: opa
      containers:
      - name: telepresence
        image: datawire/telepresence-k8s:0.94
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
      - name: opa
        image: openpolicyagent/opa:0.10.1
        imagePullPolicy: IfNotPresent
        args:
          - "run"
          - "--server"
          - "--addr=:8181"
          - "/etc/opa-policies/parameters.rego"
          - "/etc/opa-policies/default-policy-matches.rego"
          - "/etc/opa-policies/default-kubernetes-matches.rego"
          - "/etc/opa-policies/no-foreign-nodes.rego"
          - "/etc/opa-policies/no-foreign-volumes.rego"
          - "/etc/opa-policies/test-pod.rego"
        ports:
        - containerPort: 8181
        volumeMounts:
        - name: opa-policies
          mountPath: /etc/opa-policies
      - name: kube-mgmt
        image: openpolicyagent/kube-mgmt:0.7
        imagePullPolicy: Always
        args:
          - "--replicate-cluster=v1/nodes"
          - "--replicate-cluster=v1/namespaces"
          - "--replicate-cluster=admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations"
          - "--replicate-cluster=admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations"
          - "--replicate=v1/persistentvolumes"
          - "--replicate=v1/pods"
      volumes:
        - name: karydia-tls
          secret:
            secretName: karydia-tls
        - name: opa-policies
          configMap:
            name: opa-policies

---

apiVersion: v1
kind: Service
metadata:
  name: karydia
  namespace: kube-system
  labels:
    app: karydia
spec:
  type: LoadBalancer
  ports:
  - port: 443
    targetPort: 8000
  selector:
    app: karydia

---

apiVersion: v1
kind: Service
metadata:
  name: opa
  namespace: kube-system
  labels:
    app: opa
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8181
  selector:
    app: karydia
